---
- hosts: raspberry
  name: "Install CRI-O"
  vars:
    os: "{{ 'Raspbian_10' if ansible_distribution == 'Debian' else 'xUbuntu_22.04' }}"
    version: "1.28"
  tasks:
    - name: "Install prerequisite"
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      become: true
      vars:
        packages:
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        - apt-transport-https
        - bash-completion
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
    - name: "Add libcontainers archive official GPG key"
      ansible.builtin.get_url:
        url:  https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os }}/Release.key
        dest: /usr/share/keyrings/libcontainers.asc
        mode: a+r
      become: true
    - name: "Add libcontainers crio archive official GPG key"
      ansible.builtin.get_url:
        url:  https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/{{ os }}/Release.key
        dest: /usr/share/keyrings/libcontainers-cri-o.asc
        mode: a+r
      become: true
    - name: "Set up libcontainers APT repository"
      ansible.builtin.apt_repository: 
        repo: "deb [signed-by=/usr/share/keyrings/libcontainers.asc] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os }}/ /"
        state: present
        filename: libcontainers
        update_cache: yes
      become: true
    - name: "Set up libcontainers crio APT repository"
      ansible.builtin.apt_repository: 
        repo: "deb [signed-by=/usr/share/keyrings/libcontainers-cri-o.asc] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/{{ os }}/ /"
        state: present
        filename: libcontainers-cri-o
        update_cache: yes
      become: true
    - name: "Install CRI-O packages"
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      become: true
      vars:
        packages:
          - cri-o
          - cri-o-runc
          - cri-tools
    - name: "Restart crio"
      ansible.builtin.service:
        name: crio
        daemon_reload: yes
        state: restarted
        enabled: true
      become: true

- hosts: raspberry
  name: "Install Kubernetes"
  vars:
    version: v1.28
  tasks:
    - name: "Add Kubernetes's official GPG key"
      ansible.builtin.get_url:
        url:  https://pkgs.k8s.io/core:/stable:/{{ version }}/deb/Release.key
        dest: /usr/share/keyrings/kubernetes.asc
        mode: a+r
      become: true
    - name: "Set up Kubernetes's APT repository"
      ansible.builtin.apt_repository: 
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes.asc] https://pkgs.k8s.io/core:/stable:/{{ version }}/deb/ /"
        state: present
        filename: kubernetes
        update_cache: yes
      become: true
    - name: "Install Kubernetes packages"
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      become: true
      vars:
        packages:
        - kubelet
        - kubeadm
        - kubectl
    - name: "Enable autocompletion"
      ansible.builtin.lineinfile:
        path: "/home/{{  ansible_user_id }}/.bashrc"
        line: "source <(kubectl completion bash)"

- hosts: raspberry
  name: "Additional steps for Raspberry PI" #https://uthark.github.io/post/2020-09-02-installing-kubernetes-raspberrypi/
  tasks:
    - name: "Check file content"
      ansible.builtin.command: "cat /boot/firmware/cmdline.txt"
      register: current_content
    - name: "Enable cgroups"
      vars:
        config_line: "cgroup_enable=memory cgroup_memory=1 cgroup_enable=cpuset"
      ansible.builtin.replace:
        path: /boot/firmware/cmdline.txt
        regexp: "{{ current_content.stdout }}"
        replace: "{{ current_content.stdout }} {{ config_line }}"
      when: "config_line not in current_content.stdout"
      become: true

- hosts: raspberry
  name: "Kubernetes nodes post-install configuration"
  tasks:
    - name: "Configure node ip"
      ansible.builtin.lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
        create: true
      become: true
      notify:
        - restart kubelet
  handlers:    
    - name: restart kubelet
      ansible.builtin.service:
        name: kubelet
        daemon_reload: yes
        state: restarted
        enabled: true
      become: true
 
- hosts: raspberry
  name: "Kubernetes configure modules load"
  tasks:
    - name: "Configure modules load"
      ansible.builtin.lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: true
      with_items:
        - "overlay"
        - "br_netfilter"
      become: true
      notify:
        - run modprobe
  handlers:
    - name: run modprobe
      ansible.builtin.command: "{{ item }}"
      with_items:
        - "modprobe overlay"
        - "modprobe br_netfilter"
      become: true

- hosts: raspberry
  name: "Kubernetes configure iptables"
  tasks:
    - name: "Configure iptables"
      ansible.builtin.lineinfile:
        path: /etc/sysctl.d/k8s.conf
        line: "{{ item }}"
        create: true
      with_items:
        - "net.bridge.bridge-nf-call-iptables  = 1"
        - "net.bridge.bridge-nf-call-ip6tables = 1"
        - "net.ipv4.ip_forward                 = 1"
      become: true
      notify:
        - reboot all nodes
        - disable swap
        - remove swap entry

  handlers:
    - name: reboot all nodes
      ansible.builtin.reboot:
      become: true      
    - name: disable swap
      ansible.builtin.command: swapoff -a
      become: true
    - name: remove swap entry
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      become: true